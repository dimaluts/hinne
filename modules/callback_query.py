from aiogram import types, Dispatcher
from modules.hotline.hotline import create_hotline_buttons
from modules.mines.mines import create_mines_buttons
from settings.users import if_user
from database import db

import time

from random import randint


async def callback_q(call: types.CallbackQuery):
    user_id = call.from_user.id
    ment = call.from_user.get_mention(as_html=True)
    call_datas = call.data.split('|')
    if if_user(user_id, call.message):
        user = db(user_id)
        # bombs
        # ______________________________________________________________________
        if call_datas[2] == 'mine' and int(call_datas[0]) == user_id:
            if call_datas[1] != 'otmena':
                try:
                    data = user.select_value(
                        f'"{call_datas[1]}"', f'{user_id} MINE')[0]
                    if data.split('|')[0] == '0' and data.split('|')[1] == '‚ùì':
                        data_us = user.select_data(f'\'{user_id} MINE\'')
                        zarobotok = float(data_us[27])
                        zarobotok = zarobotok + 0.24
                        user.set_value(
                            'win', f'\'{zarobotok}\'', f'\'{user_id} MINE\'')
                        user.set_value(
                            f'\'{call_datas[1]}\'', '\'0|‚úÖ\'', f'\'{user_id} MINE\'')
                        user.set_value(
                            f'\'zabrat\'', '\'–ó–∞–±—Ä–∞—Ç—å!\'', f'\'{user_id} MINE\'')
                        mk = await create_mines_buttons(user_id)
                        await call.message.edit_text(f'{ment}, –≤—ã –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É –≤ –±–æ–º–±—ã!\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–ª–µ–π\n–°—Ç–∞–≤–∫–∞: {data_us[26]}\n–í—ã–∏–≥—Ä—ã—à: {zarobotok}x', reply_markup=mk)
                    elif data.split('|')[0] == '1':
                        user.set_value(
                            f'\'{call_datas[1]}\'', '\'1|üí£\'', f'\'{user_id} MINE\'')
                        user.set_value(f'\'zabrat\'', '\'\'',
                                       f'\'{user_id} MINE\'')
                        mk = await create_mines_buttons(user_id)
                        user.delete_table(f'{user_id} MINE')
                        await call.message.edit_text('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!', reply_markup=mk)
                except:
                    pass

            elif call_datas[1] == 'otmena':
                try:
                    data = user.select_data(f'\'{user_id} MINE\'')
                    if data[25] == '–û—Ç–º–µ–Ω–∞!':
                        await call.message.delete()
                        user.plus_value(data[26], 'hin', 'users')
                        user.delete_table(f'{user_id} MINE')
                    else:
                        zarobotokk = float(data[27])
                        stavka = int(data[26])
                        summa = stavka * zarobotokk

                        await call.message.edit_text(f'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {int(summa)}')
                        user.plus_value(int(summa), 'hin', 'users')
                        user.delete_table(f'{user_id} MINE')
                except:
                    pass

        # hotline
        # ______________________________________________________________________
        if int(call_datas[0]) == user_id and call_datas[2] == 'hot':
            data_us = user.select_data(f'\'{user_id} HOT\'')
            if call_datas[1] == 'v1' and data_us[1] == 1:
                kb = await create_hotline_buttons(user_id, 'üü•', '‚¨úÔ∏è', '')
                await call.message.edit_text(f'{ment}, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!', reply_markup=kb)
                user.delete_table(f'{user_id} HOT')
            elif call_datas[1] == 'v2' and data_us[2] == 1:
                kb = await create_hotline_buttons(user_id, '‚¨úÔ∏è', 'üü•', '')
                user.delete_table(f'{user_id} HOT')
                await call.message.edit_text(f'{ment}, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!', reply_markup=kb)
            else:
                if call_datas[1] == 'v1' and data_us[1] == 0:
                    kb = await create_hotline_buttons(user_id, 'üü©', '‚¨úÔ∏è', '')
                    user.plus_value(int(data_us[3]*1.5), 'hin', 'users')
                    user.delete_table(f'{user_id} HOT')
                    await call.message.edit_text(f'{ment}, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 1.5x!\n{int(data_us[3]*1.5)} —Ö–∏–Ω', reply_markup=kb)
                elif call_datas[1] == 'v2' and data_us[2] == 0:
                    kb = await create_hotline_buttons(user_id, '‚¨úÔ∏è', 'üü©', '')
                    user.plus_value(int(data_us[3]*1.5), 'hin', 'users')
                    user.delete_table(f'{user_id} HOT')
                    await call.message.edit_text(f'{ment}, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 1.5x!\n{int(data_us[3]*1.5)} —Ö–∏–Ω', reply_markup=kb)

            if call_datas[1] == 'cancel' and call_datas[2] == 'hot':
                user.plus_value(int(data_us[3]), 'hin', 'users')
                await call.message.delete()
                user.delete_table(f'{user_id} HOT')

        # bonus
        # ______________________________________________________________________
        if int(call_datas[0]) == user_id and call_datas[1] == 'bonus':
            hin = user.select_data('users')[1]
            if hin < 10:
                us_data = user.select_data('users')
                bonus_time = us_data[5]
                current_time = time.time()
                if current_time - bonus_time >= 86400:
                    user.set_value('bonus_time', current_time, 'users')
                    bonus = randint(300, 1100)
                    user.plus_value(bonus, 'hin', 'users')
                    await call.message.edit_text(f'{ment}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ {bonus} —Ö–∏–Ω!')
                else:
                    await call.message.edit_text(f'{ment}, –±–æ–Ω—É—Å –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –∫–∞–∂–¥–Ω—ã–µ 24 —á–∞—Å–∞!')
            else:
                await call.message.edit_text(f'{ment}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –µ—Å–ª–∏ –≤–∞—à –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ 10!')
                
        # up limit
        # ______________________________________________________________________
        if int(call_datas[0]) == user_id and call_datas[2] == 'limit':
            data = user.select_data('users')
            hin = int(data[1])
            give_max = int(data[8])
            if hin >= give_max:
                user.set_value('give_max', give_max+give_max, 'users')
                user.minus_value(give_max, 'hin', 'users')
                user.set_value('give_limit', give_max+give_max, 'users')
                await call.message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—Å–∏–ª–∏ —Å–≤–æ–π –ª–∏–º–∏—Ç!\n–¢–µ–ø–µ—Ä—å –≤–∞—à –ª–∏–º–∏—Ç {give_max+give_max} —Ö–∏–Ω.')
            else:
                await call.message.answer(f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ, –µ—â–µ –Ω—É–∂–Ω–æ {give_max-hin} —Ö–∏–Ω.')
            
        


def register_callback_handler(dp: Dispatcher):
    dp.register_callback_query_handler(callback_q)
